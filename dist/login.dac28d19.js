const e={CART:"sh_cart",USER:"current_user"},t=(e,t)=>localStorage.setItem(e,JSON.stringify(t)),a=e=>JSON.parse(localStorage.getItem(e));const o=a=>{return t(e.USER,{id:(o=a).id,username:o.username,email:o.email});var o},s=()=>a(e.USER);const n={PRODUCTS:"https://mockend.com/alaanescobedo/db-server/products",USERS:"https://mockend.com/alaanescobedo/db-server/users",EMAIL:"https://mockend.com/alaanescobedo/db-server/email",AUTH:"https://mockend.com/alaanescobedo/db-server/auth"};var r={get:async(e,{headers:t={}}={})=>{const a={method:"GET",headers:t},o=await fetch(e,a);return await o.json()},post:async(e,{body:t,headers:a={}}={})=>{const o={method:"POST",headers:{"Content-Type":"application/json",...a},body:JSON.stringify(t)},s=await fetch(e,o);return await s.json()}};const d=document.getElementById("notify-form-error"),c=document.getElementById("notify-form-loader"),i=e=>{d.classList.add("d-none"),c.classList.remove("d-none")},l=e=>{console.log(e),d.classList.remove("d-none")},m=()=>c.classList.add("d-none");const h=e=>{if(!e.checkValidity())throw e.classList.add("was-validated"),new Error("Form is not valid");return e.classList.remove("was-validated"),Object.fromEntries(new FormData(e))};document.getElementById("login-form").addEventListener("submit",(async e=>{try{e.preventDefault(),i();h(e.target);const t=await r.get(`${n.USERS}/1`);o(t),location.href="/index.html"}catch(e){l(e)}finally{m()}})),s()&&(location.href="/index.html");
//# sourceMappingURL=login.dac28d19.js.map
